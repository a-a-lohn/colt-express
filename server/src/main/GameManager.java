package main;

import java.util.ArrayList;

import com.smartfoxserver.v2.protocol.serialization.SerializableSFSType;

// Start of user code for imports
// End of user code

/**
 * GameManager class definition.
 * Generated by the TouchCORE code generator.
 */
public class GameManager implements SerializableSFSType {
    
    protected GameStatus status;
    protected Round currentRound;
    protected Bandit currentBandit;
    protected ArrayList<Round> rounds = new ArrayList<Round>();
    protected static GameManager instance;
    protected static Marshal marshalInstance;
    protected static PlayedPile playedPileInstance;
    protected ArrayList<TrainUnit> trainUnits = new ArrayList<TrainUnit>();
    protected ArrayList<Bandit> bandits = new ArrayList<Bandit>();
    
    public GameManager() { }
    
    Round getCurrentRound() {
        return this.currentRound;
    }

    boolean setCurrentRound(Round newObject) {
        this.currentRound = newObject;
        return true;
    }

    protected boolean addSimpleRounds(int index, Round a) {
        /* TODO: No message view defined */
        return false;
    }

    /*boolean addRoundsAt(int index, Round a) {
        int size = rounds.size();
        if (size == maximum) {
            return false;
        }
        rounds.add(index, a);
        return true;
    }*/

    boolean removeRoundsAt(int index) {
        Round removedElement = rounds.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Round getRoundsAt(int index) {
        Round associated = rounds.get(index);
        return associated;
    }

    protected boolean addSimpleRounds(Round a) {
        /* TODO: No message view defined */
        return false;
    }

    protected boolean removeSimpleRounds(Round a) {
        /* TODO: No message view defined */
        return false;
    }

    boolean addRounds(Round a) {
        int size = rounds.size();
        /*if (size == maximum) {
            return false;
        }*/
        boolean added = rounds.add(a);
        return added;
    }

    boolean removeRounds(Round a) {
        boolean removed = rounds.remove(a);
        return removed;
    }

    boolean containsRounds(Round a) {
        boolean contains = rounds.contains(a);
        return contains;
    }

    int sizeOfRounds() {
        int size = rounds.size();
        return size;
    }

    ArrayList<Round> getRounds() {
        return this.rounds;
    }

    void setGameStatus(GameStatus newStatus) {
        /* TODO: No message view defined */
    }

    boolean addTrainUnitsAt(int index, TrainUnit a) {
        boolean contains = trainUnits.contains(a);
        if (contains) {
            return false;
        }
        trainUnits.add(index, a);
        return true;
    }

    boolean removeTrainUnitsAt(int index) {
        TrainUnit removedElement = trainUnits.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    TrainUnit getTrainUnitsAt(int index) {
        TrainUnit associated = trainUnits.get(index);
        return associated;
    }

    boolean addTrainUnits(TrainUnit a) {
        boolean contains = trainUnits.contains(a);
        if (contains) {
            return false;
        }
        boolean added = trainUnits.add(a);
        return added;
    }

    boolean removeTrainUnits(TrainUnit a) {
        boolean removed = trainUnits.remove(a);
        return removed;
    }

    boolean containsTrainUnits(TrainUnit a) {
        boolean contains = trainUnits.contains(a);
        return contains;
    }

    int sizeOfTrainUnits() {
        int size = trainUnits.size();
        return size;
    }

    ArrayList<TrainUnit> getTrainUnits() {
        return this.trainUnits;
    }

    Bandit getCurrentBandit() {
        return this.currentBandit;
    }

    boolean setCurrentBandit(Bandit newObject) {
        this.currentBandit = newObject;
        return true;
    }

    protected boolean addSimpleBandits(int index, Bandit a) {
        /* TODO: No message view defined */
        return false;
    }

    /*boolean addBanditsAt(int index, Bandit a) {
        int size = bandits.size();
        if (size == maximum) {
            return false;
        }
        bandits.add(index, a);
        return true;
    }*/

    boolean removeBanditsAt(int index) {
        Bandit removedElement = bandits.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Bandit getBanditsAt(int index) {
        Bandit associated = bandits.get(index);
        return associated;
    }

    protected boolean addSimpleBandits(Bandit a) {
        /* TODO: No message view defined */
        return false;
    }

    protected boolean removeSimpleBandits(Bandit a) {
        /* TODO: No message view defined */
        return false;
    }

    boolean addBandits(Bandit a) {
        int size = bandits.size();
        /*if (size == maximum) {
            return false;
        }*/
        boolean added = bandits.add(a);
        return added;
    }

    boolean removeBandits(Bandit a) {
        boolean removed = bandits.remove(a);
        return removed;
    }

    boolean containsBandits(Bandit a) {
        boolean contains = bandits.contains(a);
        return contains;
    }

    int sizeOfBandits() {
        int size = bandits.size();
        return size;
    }

    ArrayList<Bandit> getBandits() {
        return this.bandits;
    }

    static GameManager getInstance() {
        /* TODO: No message view defined */
        return null;
    }
}
