package main;

import java.util.ArrayList;

// Start of user code for imports
// End of user code

/**
 * Round class definition.
 * Generated by the TouchCORE code generator.
 */
public class Round {
    
    protected RoundType round;
    protected Turn currentTurn;
    protected ArrayList<Turn> turns;
    
    protected boolean addSimpleTurns(int index, Turn a) {
        /* TODO: No message view defined */
        return false;
    }

    boolean addTurns(Turn a) {
        int size = turns.size();
        /*if (size == maximum) {
            return false;
        }*/
        boolean added = turns.add(a);
        return added;
    }

    boolean addTurnsAt(int index, Turn a) {
        int size = turns.size();
        /*if (size == maximum) {
            return false;
        }*/
        turns.add(index, a);
        return true;
    }

    boolean removeTurnsAt(int index) {
        int size = turns.size();
        /*if (size == minimum) {
            return false;
        }*/
        Turn removedElement = turns.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Turn getTurnsAt(int index) {
        Turn associated = turns.get(index);
        return associated;
    }

    protected boolean addSimpleTurns(Turn a) {
        /* TODO: No message view defined */
        return false;
    }

    protected boolean removeSimpleTurns(Turn a) {
        /* TODO: No message view defined */
        return false;
    }

    boolean removeTurns(Turn a) {
        int size = turns.size();
        /*if (size == minimum) {
            return false;
        }*/
        boolean removed = turns.remove(a);
        return removed;
    }

    Round() {
        ArrayList<Turn> collection = new ArrayList<Turn>();
    }

    boolean containsTurns(Turn a) {
        boolean contains = turns.contains(a);
        return contains;
    }

    int sizeOfTurns() {
        int size = turns.size();
        return size;
    }

    ArrayList<Turn> getTurns() {
        return this.turns;
    }

    Turn getCurrentTurn() {
        return this.currentTurn;
    }

    boolean setCurrentTurn(Turn newObject) {
        this.currentTurn = newObject;
        return true;
    }

    public Turn getNextTurn() {
        /* TODO: No message view defined */
        return null;
    }
}
