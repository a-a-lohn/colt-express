package main;

import java.util.ArrayList;

// Start of user code for imports
// End of user code

/**
 * TrainUnit class definition.
 * Generated by the TouchCORE code generator.
 */
class TrainUnit {
    
    protected CarType carType;
    protected TrainUnit otherfloor;
    protected Marshal marshalHere;
    protected ArrayList<Bandit> banditPositions = new ArrayList<Bandit>();
    protected ArrayList<Loot> lootInCabin = new ArrayList<Loot>();
    protected ArrayList<TrainUnit> adjacent;
    protected ArrayList<Horse> horses = new ArrayList<Horse>();
    
    boolean addBanditPositionsAt(int index, Bandit a) {
        int size = banditPositions.size();
        /*if (size == maximum) {
            return false;
        }*/
        banditPositions.add(index, a);
        return true;
    }

    boolean removeBanditPositionsAt(int index) {
        Bandit removedElement = banditPositions.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Bandit getBanditPositionsAt(int index) {
        Bandit associated = banditPositions.get(index);
        return associated;
    }

    boolean addBanditPositions(Bandit a) {
        int size = banditPositions.size();
        /*if (size == maximum) {
            return false;
        }*/
        boolean added = banditPositions.add(a);
        return added;
    }

    boolean removeBanditPositions(Bandit a) {
        boolean removed = banditPositions.remove(a);
        return removed;
    }

    boolean containsBanditPositions(Bandit a) {
        boolean contains = banditPositions.contains(a);
        return contains;
    }

    int sizeOfBanditPositions() {
        int size = banditPositions.size();
        return size;
    }

    ArrayList<Bandit> getBanditPositions() {
        return this.banditPositions;
    }

    boolean addLootInCabinAt(int index, Loot a) {
        boolean contains = lootInCabin.contains(a);
        if (contains) {
            return false;
        }
        lootInCabin.add(index, a);
        return true;
    }

    boolean removeLootInCabinAt(int index) {
        Loot removedElement = lootInCabin.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Loot getLootInCabinAt(int index) {
        Loot associated = lootInCabin.get(index);
        return associated;
    }

    boolean addLootInCabin(Loot a) {
        boolean contains = lootInCabin.contains(a);
        if (contains) {
            return false;
        }
        boolean added = lootInCabin.add(a);
        return added;
    }

    boolean removeLootInCabin(Loot a) {
        boolean removed = lootInCabin.remove(a);
        return removed;
    }

    boolean containsLootInCabin(Loot a) {
        boolean contains = lootInCabin.contains(a);
        return contains;
    }

    int sizeOfLootInCabin() {
        int size = lootInCabin.size();
        return size;
    }

    ArrayList<Loot> getLootInCabin() {
        return this.lootInCabin;
    }

    boolean addAdjacentAt(int index, TrainUnit a) {
        boolean contains = adjacent.contains(a);
        if (contains) {
            return false;
        }
        adjacent.add(index, a);
        return true;
    }

    boolean removeAdjacentAt(int index) {
        TrainUnit removedElement = adjacent.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    TrainUnit getAdjacentAt(int index) {
        TrainUnit associated = adjacent.get(index);
        return associated;
    }

    boolean addAdjacent(TrainUnit a) {
        boolean contains = adjacent.contains(a);
        if (contains) {
            return false;
        }
        boolean added = adjacent.add(a);
        return added;
    }

    boolean removeAdjacent(TrainUnit a) {
        boolean removed = adjacent.remove(a);
        return removed;
    }

    TrainUnit() {
        ArrayList<TrainUnit> collection = new ArrayList<TrainUnit>();
    }

    boolean containsAdjacent(TrainUnit a) {
        boolean contains = adjacent.contains(a);
        return contains;
    }

    int sizeOfAdjacent() {
        int size = adjacent.size();
        return size;
    }

    ArrayList<TrainUnit> getAdjacent() {
        return this.adjacent;
    }

    TrainUnit getOtherfloor() {
        return this.otherfloor;
    }

    boolean setOtherfloor(TrainUnit newObject) {
        this.otherfloor = newObject;
        return true;
    }

    boolean addHorsesAt(int index, Horse a) {
        boolean contains = horses.contains(a);
        if (contains) {
            return false;
        }
        horses.add(index, a);
        return true;
    }

    boolean removeHorsesAt(int index) {
        Horse removedElement = horses.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Horse getHorsesAt(int index) {
        Horse associated = horses.get(index);
        return associated;
    }

    boolean addHorses(Horse a) {
        boolean contains = horses.contains(a);
        if (contains) {
            return false;
        }
        boolean added = horses.add(a);
        return added;
    }

    boolean removeHorses(Horse a) {
        boolean removed = horses.remove(a);
        return removed;
    }

    boolean containsHorses(Horse a) {
        boolean contains = horses.contains(a);
        return contains;
    }

    int sizeOfHorses() {
        int size = horses.size();
        return size;
    }

    ArrayList<Horse> getHorses() {
        return this.horses;
    }

    Marshal getMarshalHere() {
        return this.marshalHere;
    }

    boolean setMarshalHere(Marshal newObject) {
        this.marshalHere = newObject;
        return true;
    }
}
