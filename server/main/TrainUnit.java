package main;

import java.util.ArrayList;

import com.smartfoxserver.v2.protocol.serialization.SerializableSFSType;

// Start of user code for imports
// End of user code

/**
 * TrainUnit class definition.
 * Generated by the TouchCORE code generator.
 */
public class TrainUnit implements SerializableSFSType {
    
    protected CarType carType;
    protected TrainUnit otherfloor;
    protected Marshal marshalHere;
    protected ArrayList<Bandit> banditPositions = new ArrayList<Bandit>();
    protected ArrayList<Loot> lootInCabin = new ArrayList<Loot>();
    protected ArrayList<TrainUnit> adjacent = new ArrayList<TrainUnit>();
    protected ArrayList<Horse> horses = new ArrayList<Horse>();
    
    public TrainUnit() { }

    /*boolean addBanditPositionsAt(int index, Bandit a) {
        int size = banditPositions.size();
        if (size == maximum) {
            return false;
        }
        banditPositions.add(index, a);
        return true;
    }
    */

    /*boolean removeBanditPositionsAt(int index) {
        Bandit removedElement = banditPositions.remove(index);
        boolean result = removedElement != null;
        return result;
    }*/

    /*Bandit getBanditPositionsAt(int index) {
        Bandit associated = banditPositions.get(index);
        return associated;
    }*/

    public void addBanditPosition(Bandit a) {
        if (this.banditPositions.contains(a)){
            return;
        }
        this.banditPositions.add(a);
    }

    public void removeBanditPosition(Bandit a) {
        if (this.banditPositions.contains(a)) {
            this.banditPositions.remove(a);
        }
    }

    public boolean containsBanditPositions(Bandit a) {
        boolean contains = this.banditPositions.contains(a);
        return contains;
    }

    public int numberOfBandits() {
        int size = this.banditPositions.size();
        return size;
    }

    public ArrayList<Bandit> getBanditPositions() {
        return this.banditPositions;
    }

    /*boolean addLootInCabinAt(int index, Loot a) {
        boolean contains = lootInCabin.contains(a);
        if (contains) {
            return false;
        }
        lootInCabin.add(index, a);
        return true;
    }

    boolean removeLootInCabinAt(int index) {
        Loot removedElement = lootInCabin.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Loot getLootInCabinAt(int index) {
        Loot associated = lootInCabin.get(index);
        return associated;
    }*/

    public void addLootInCabin(Loot a) {
        boolean contains = this.lootInCabin.contains(a);
        if (contains) {
            return;
        }
        this.lootInCabin.add(a);
    }

    public void removeLootInCabin(Loot a) {
        if (this.lootInCabin.contains(a)){
            this.lootInCabin.remove(a);
        }
    }

    public boolean containsLoot(Loot a) {
        boolean contains = this.lootInCabin.contains(a);
        return contains;
    }

    public int amountOfLootInCabin() {
        int size = this.lootInCabin.size();
        return size;
    }

    public ArrayList<Loot> getLootInCabin() {
        return this.lootInCabin;
    }

    /*boolean addAdjacentAt(int index, TrainUnit a) {
        boolean contains = adjacent.contains(a);
        if (contains) {
            return false;
        }
        adjacent.add(index, a);
        return true;
    }

    boolean removeAdjacentAt(int index) {
        TrainUnit removedElement = adjacent.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    TrainUnit getAdjacentAt(int index) {
        TrainUnit associated = adjacent.get(index);
        return associated;
    }*/

    public void addAdjacent(TrainUnit a) {
        boolean contains = this.adjacent.contains(a);
        if (contains) {
            return;
        }
        this.adjacent.add(a);
    }

    public void removeAdjacent(TrainUnit a) {
        if (this.adjacent.contains(a)) {
            adjacent.remove(a);
        }
    }

    public boolean containsAdjacent(TrainUnit a) {
        boolean contains = this.adjacent.contains(a);
        return contains;
    }

    public int sizeOfAdjacent() {
        int size = this.adjacent.size();
        return size;
    }

    public ArrayList<TrainUnit> getAdjacent() {
        return this.adjacent;
    }

    public TrainUnit getOtherfloor() {
        return this.otherfloor;
    }

    public void setOtherfloor(TrainUnit newObject) {
        this.otherfloor = newObject;
    }

    /*boolean addHorsesAt(int index, Horse a) {
        boolean contains = horses.contains(a);
        if (contains) {
            return false;
        }
        horses.add(index, a);
        return true;
    }

    boolean removeHorsesAt(int index) {
        Horse removedElement = horses.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Horse getHorsesAt(int index) {
        Horse associated = horses.get(index);
        return associated;
    }*/

    public void addHorse(Horse a) {
        boolean contains = this.horses.contains(a);
        if (contains) {
            return;
        }
        this.horses.add(a);
    }

    public void removeHorses(Horse a) {
        if (this.horses.contains(a)){
            this.horses.remove(a);
        }
    }

    public boolean containsHorses(Horse a) {
        boolean contains = this.horses.contains(a);
        return contains;
    }

    public int numberOfHorses() {
        int size = horses.size();
        return size;
    }

    public ArrayList<Horse> getHorses() {
        return this.horses;
    }

    public Marshal getMarshalHere() {
        return this.marshalHere;
    }

    public void setMarshalHere(Marshal newObject) {
        this.marshalHere = newObject;
    }
}
